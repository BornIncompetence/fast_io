cmake_minimum_required(VERSION 3.15)

# project(fast_io_examples)
set(CMAKE_FOLDER "examples")

if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
	if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 10)
		message(FATAL_ERROR "fast_io no longer supports GCC < 10 version because of incomplete C++ standard library support for concepts lite. Please build the master version of GCC from its official or mirror repo. Or use Visual Studio Preview")
	endif()
endif()

function(example_target FOLDER_NUMBER SOURCE_NAME)
	set(this_target "example_${FOLDER_NUMBER}_${SOURCE_NAME}")

	add_executable(${this_target} "${SOURCE_NAME}.cc" ${ARGN})

	set_target_properties(${this_target} PROPERTIES CXX_EXTENSIONS NO)

	target_compile_features(${this_target} PRIVATE cxx_std_20)
	target_compile_options(${this_target} PRIVATE
		$<$<AND:$<CONFIG:RELEASE>,$<CXX_COMPILER_ID:GNU>>: -s>
		$<$<CXX_COMPILER_ID:GNU>: -ffast-math -Wall -Wextra>
		$<$<CXX_COMPILER_ID:Clang>: -ffast-math -Xclang>
	)
	target_link_libraries(${this_target} fast_io)
endfunction(example_target)

# fast_target(compile "./0000.compile/fast_io.cc")
# fast_target(hw "./0001.helloworld/hw.cc")
# fast_target(hw_u8 "./0001.helloworld/hw_u8.cc")
# if (WIN32)
# 	fast_target(hello_world_win32_box "./0001.helloworld/hello_world_win32_box.cc")
# 	fast_target(utf8_file "./0022.utf/utf8_file.cc")
# endif (WIN32)

# TODO: FIX compilation errors
add_subdirectory(0000.compile)
# add_subdirectory(0001.helloworld)
# add_subdirectory(0002.a+b)
# add_subdirectory(0003.floating_point)
# add_subdirectory(0004.string)
# add_subdirectory(0005.file_io)
# add_subdirectory(0006.datetime)
# add_subdirectory(0007.legacy)
# add_subdirectory(0008.dns)
# add_subdirectory(0009.transmit)
# add_subdirectory(0010.http)
# add_subdirectory(0011.black_hole)
# add_subdirectory(0012.debug)
# add_subdirectory(0013.tcp)
# add_subdirectory(0014.epoll)
# add_subdirectory(0015.udp)
# add_subdirectory(0016.process)
# add_subdirectory(0017.tcp_multiprocess_async)
# add_subdirectory(0018.tcp_thread_pool)
# add_subdirectory(0019.win32)
# add_subdirectory(0020.third_party)
# add_subdirectory(0021.igenerator)
# add_subdirectory(0022.utf)
# add_subdirectory(0023.bound)
# add_subdirectory(0024.locale)
# add_subdirectory(0025.sound)
# add_subdirectory(0026.custom_device)
# add_subdirectory(0027.width)
# add_subdirectory(0028.openssl)
# add_subdirectory(0029.io_file)
# add_subdirectory(0030.c_interface)
# add_subdirectory(0031.win32_memory)
# add_subdirectory(0032.win32_internet)
# add_subdirectory(0033.win32_iocp)
# add_subdirectory(0034.asio)
# add_subdirectory(0035.fast_io_error)
# add_subdirectory(0036.int128)
# add_subdirectory(0037.long_double)
# add_subdirectory(0038.boost_iostreams)
# add_subdirectory(0039.filebuf_file)
# add_subdirectory(0040.eof)
# add_subdirectory(0041.transaction)
# add_subdirectory(0042.text)
# add_subdirectory(0043.iconv)
# add_subdirectory(0044.sha)
# add_subdirectory(0045.iterator)
# add_subdirectory(0046.zlib)
# add_subdirectory(0047.jenkins_hash)
# add_subdirectory(0048.crc)
# add_subdirectory(0049.md5)
# add_subdirectory(0050.gcm)
# add_subdirectory(0051.io_files)
# add_subdirectory(0052.print_reserver)

# Author's changes

# add_executable(0000.compile "./0000.compile/fast_io.cc")
# add_executable(0001.hw "./0001.helloworld/hw.cc")
# add_executable(0001.hw_u8 "./0001.helloworld/hw_u8.cc")
# if (WIN32)
# add_executable(0001.hello_world_win32_box "./0001.helloworld/hello_world_win32_box.cc")
# endif (WIN32)

# add_executable(0002.dec "./0002.a+b/dec.cc")
# add_executable(0002.string "./0002.a+b/string.cc")
# add_executable(0002.hex "./0002.a+b/hex.cc")
# add_executable(0002.hexupper "./0002.a+b/hexupper.cc")
# add_executable(0002.base36 "./0002.a+b/base36.cc")
# add_executable(0002.base36upper "./0002.a+b/base36upper.cc")
# add_executable(0002.base36upper_sgn "./0002.a+b/base36upper_sgn.cc")
# add_executable(0002.bin "./0002.a+b/bin.cc")
# add_executable(0002.dectext "./0002.a+b/dectext.cc")
# add_executable(0002.floating "./0002.a+b/floating.cc")

# add_executable(0003.all "./0003.floating_point/all.cc")
# add_executable(0003.all_comma "./0003.floating_point/all_comma.cc")
# add_executable(0003.comma "./0003.floating_point/comma.cc")
# add_executable(0003.comma_pi "./0003.floating_point/comma_pi.cc")
# add_executable(0003.fixed "./0003.floating_point/fixed.cc")
# add_executable(0003.scientific "./0003.floating_point/scientific.cc")
# add_executable(0003.sanshengage "./0003.floating_point/sanshengage.cc")

# add_executable(0004.concat "./0004.string/concat.cc")
# add_executable(0004.hello_kate "./0004.string/hello_kate.cc")
# add_executable(0004.hello_kate_concat "./0004.string/hello_kate_concat.cc")
# add_executable(0004.hello_kate_concat_more "./0004.string/hello_kate_concat_more.cc")
# add_executable(0004.hello_kate_ostring_ref "./0004.string/hello_kate_ostring_ref.cc")

# add_executable(0005.file_hw "./0005.file_io/file_hw.cc")

# add_executable(0006.1ms "./0006.datetime/1ms.cc")
# add_executable(0006.current_time "./0006.datetime/current_time.cc")

# add_executable(0007.c_file_from_posix_io_handle "./0007.legacy/c_file_from_posix_io_handle.cc")
# add_executable(0007.c_file_unlocked_from_posix_out "./0007.legacy/c_file_unlocked_from_posix_out.cc")
# add_executable(0007.stream_io_observer "./0007.legacy/streambuf_io_observer.cc")
# add_executable(0007.stream_fd "./0007.legacy/stream_fd.cc")

# add_executable(0009.transmit "./0009.transmit/transmit.cc")
# add_executable(0009.http_test_zero_copy "./0009.transmit/http_test_zero_copy.cc")
# add_executable(0009.transmit_bytes "./0009.transmit/transmit_bytes.cc")
# add_executable(0009.transmit_to_c_stdout "./0009.transmit/transmit_to_c_stdout.cc")

# add_executable(0010.http "./0010.http/http.cc")

# add_executable(0011.black_hole "./0011.black_hole/black_hole.cc")

# add_executable(0013.client "./0013.tcp/client.cc")
# add_executable(0013.server "./0013.tcp/server.cc")

# add_executable(0016.process "./0016.process/process.cc")
# if (WIN32)
# add_executable(0019.win32 "./0019.win32/win32.cc")
# endif (WIN32)

# add_executable(0039.filebuf_file "./0039.filebuf_file/filebuf_file.cc")
# add_executable(0039.posix_file "./0039.filebuf_file/posix_file.cc")
# if (WIN32)
# add_executable(0039.win32_file "./0039.filebuf_file/win32_file.cc")
# endif (WIN32)
# add_executable(0044.sha256 "./0044.sha/sha256.cc")
# add_executable(0044.hmac_sha256 "./0044.sha/hmac_sha256.cc")

# add_executable(0022.utf8_file "./0022.utf/utf8_file.cc")
